name: Release new versions

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[release]')"
    steps:
      - uses: actions/checkout@v3
      - name: Generate files with NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: "18.1"
      - name: Generating files
        run: |
          echo "Installing packages in root dir..."
          yarn install
          echo "Transpiling with tsc..."
          yarn tsc
          cp package.json build
          cp ecosystem.config.cjs build
          echo "Generating 'build.tgz' file..."
          cd build && tar -czvf build.tgz ./ && mv build.tgz ../ && cd ../
          echo "Generated 'build.tgz' file"
          cd build
          yarn install --production
          REPO_LOC=$PWD
          cd ~
          sudo npm i -g node-prune modclean terser
          cd $REPO_LOC
          echo "Cleaning up node_modules folder..."
          modclean -r && node-prune
          find -name '*.js' | while read a; do echo $a; terser $a -o $a; done
          echo "Generating 'build_w_nm_linux.tgz' file..."
          tar -czvf build_w_nm_linux.tgz ./ && mv build_w_nm_linux.tgz ../ && cd ../
          echo "Generated 'build_w_nm_linux.tgz' file"
      - name: Set tag variable
        id: tag_s
        run: echo ::set-output name=tag_name::$(echo `git log -1 --format="%s"` | cut -d'v' -f2)
      - name: Upload Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build.tgz,build_w_nm_linux.tgz"
          bodyFile: "releaseBody.md"
          tag: ${{ steps.tag_s.outputs.tag_name }}
